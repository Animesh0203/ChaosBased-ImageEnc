# Importing all the function from Xn module

from Chaos.Xn import *

def y01(binary_keys,i=0,j=1,k=2):
    keys = binary_keys
    B2 = keys[i] + keys[j] + keys[k]
    y01 = (int(''.join(B2),2)) / (2**24)
    return y01


# This function takes the list of 10 binary keys, 24 integer values obtained using first logistic map (Xn) and 3 key index values
# The 3 given keys are then concatenated to create a 24 bit log binary string B2
# This function returns the value of y02
def y02(binary_keys,_24_values_of_Pk,i=0,j=1,k=2):
    p24 = _24_values_of_Pk
    keys = binary_keys
    B2 = keys[i] + keys[j] + keys[k]
    y02=0

    for i in range(0,len(p24)):
        y02 = (int(B2[p24[i]]))*(2**i) + y02


    y02 = y02/(2**24)
    return y02

# This function mods the value generated by y01() and y02() function by 1
def y0(y01,y02):
    return (y01+y02)%1


